{"body":"###Project Description\r\n\r\nWrite maintainable unit tests, faster.\r\n\r\nAutoFixtureTS is inspired by AutoFixture.\r\nAutoFixtureTS makes it easier for TypeScript developers to do Test-Driven Development by automating non-relevant Test Fixture Setup, allowing the Test Developer to focus on the essentials of each test case.\r\n\r\n###Overview\r\n\r\nAutoFixtureTS is designed to make Test-Driven Development more productive and unit tests more refactoring-safe. It does so by removing the need for hand-coding anonymous variables as part of a test's Fixture Setup phase.\r\n\r\nWhen writing unit tests, you typically need to create some objects that represent the initial state of the test. Often, an API will force you to specify much more data than you really care about, so you frequently end up creating objects that has no influence on the test, simply to make the code compile.\r\n\r\nAutoFixtureTS can help by creating such Anonymous Variables for you. Here's a simple example:\r\n\r\n`it(\"can create number Anonymous with number object expect correct result\", () =>{        \r\n        // Fixture setup\r\n        var sut = new AutofixtureTS.Fixture();       \r\n        // Exercise system                         \r\n        var expected = sut.CreateAnonymous(Number());\r\n        // Verify outcome\r\n        expect(expected).toBe(1);        \r\n        // Teardown\r\n    });`\r\n\r\nThis example illustrates the basic principle of AutoFixtureTS: It can create values of virtually any type without the need for you to explicitly define which values should be used. ","name":"AutofixtureTS","tagline":"AutoFixture for TypeScript","note":"Don't delete this file! It's used internally to help with page regeneration.","google":""}